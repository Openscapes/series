{"title":"GitHub strategies","markdown":{"yaml":{"title":"GitHub strategies"},"headingText":"GitHub Clinic","containsRefs":false,"markdown":"\n\nWhat is GitHub[^1], and what are GitHub strategies for Future Us?\n\n[^1]: From [Bryan 2017](https://peerj.com/preprints/3159/): \"we're targeting GitHub - not Bitbucket or GitLab - for the sake of specificity. However, all the big-picture principles and even some mechanics will carry over to these alternative hosting platforms. We are advocating for the use of hosted version control as a general concept, with GitHub being the best and most common provider today.\"\n\nGitHub is a powerful tool for collaborative coding with version control, but here and in our GitHub Clinic we are going to focus on some of its lesser-celebrated awesomeness. We'll talk about GitHub for supporting, reusing, contributing, and failing safely, as well as GitHub for publication and project management. We will focus on how to use GitHub for collaboration and communication for science, and spend time with hands-on practice.\n\n\nOpenscapes GitHub Clinic introduces GitHub with the motivation of collaboration and open science. It is designed for both new and seasoned learners, focused on how develop workflows with diverse teams.\n\n**Slides** that have been presented during Champions Program Cohort Calls:\n\n-   [**GitHub Clinic**](https://docs.google.com/presentation/d/1geUN-dv-NMx6IgeCwMRVmTO8nZaauIl26tZDOrkLW_E/) **(slides)**\n\n**Video recordings**\n\n-   [**Part 1: Publishing**](https://youtu.be/anrZwE3pIwQ) **(video)**, recorded as 19 minutes of lesson, cut for participants hands-on in breakout rooms, and 5 minutes of followup lesson.\n\n-   [**Part 2: Project Management**](https://youtu.be/dDRDma-5_ww) **(video)**, recorded as 9 minutes of lesson, cut for participants hands-on in breakout rooms, and 5 minutes of followup lesson.\n\n-   [**Part 3: 2i2c JupyterHub**](https://youtu.be/Lum7irkP6k8) **(video)** introduces a beginning GitHub workflow from our 2i2c JupyterHub (part of [NASA-Openscapes](https://nasa-openscapes.github.io)). It is recorded as 9 minutes of lesson.\n\n## GitHub for supporting, reusing, contributing, and failing safely\n\nThis introduction was developed with Allison Horst in the **GitHub Illustrated Series** ([Horst & Lowndes 2022](https://openscapes.org/blog/2022/05/27/github-illustrated-series/)):\n\n**When we talk about managing projects to help us contribute, reuse, collaborate, and fail safely, we are talking about GitHub**. We mean using modern collaborative software designed to organize otherwise unwieldy interrelated files and to track changes by potentially different people through time -- something that is for everyone, whether or not we identify as \"coders\". People do use GitHub for code- and data-intensive projects, but we are not limited to that use. GitHub is a powerful approach for any project that we want to organize and communicate about; it's a way we can be open with ourselves and our teams, and also work more publicly as we feel comfortable.\n\nSo let's talk about why GitHub is so empowering for our project-oriented and collaborative lives.\n\n![](images/github_friends.png){fig-alt=\"A row of 6 cute smiling monsters celebrating using GitHub. The first, wearing a climbing harness labeled \\\"Me\\\" is high-fiving another whose harness says \\\"Future Me\\\". Others hold a box of snacks (tacos!), a map, a rope. Text above the monsters quotes Jenny Bryan: \\\\\\\"Collaboration is the most compelling reason to manage a project with Git and GitHub. My definition of collaboration includes hands-on participation by multiple people, including your past and future self, as well as an asymmetric model, in which some people are active makers and others only read or review\" fig-align=\"center\"}\n\nSee the **GitHub Illustrated Series** ([Horst & Lowndes 2022](https://openscapes.org/blog/2022/05/27/github-illustrated-series/)) for the full series!\n\n## Growth Mindset\n\nWhen we teach GitHub, we find it's useful to say explicitly that we should go in with a Growth Mindset - the idea that we don't know something ***yet*** but we are able to learn. Growth Mindset is work by Dr. Carol Dweck - see her [book](http://www.amazon.com/gp/product/0345472322/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0345472322&linkCode=as2&tag=farnamstreet-20&linkId=ZYKJHPHELN46AOWM), [TED Talk](https://www.youtube.com/watch?v=_X0mgOOSpLU&t=11s&ab_channel=TED) (10 min); [illustrated video](https://www.youtube.com/watch?v=M1CHPnZfFmU&ab_channel=JohnSpencer) (2 min).\n\nAs part of this, we like how Jenny Bryan ([Code Smells and Feels](https://github.com/jennybc/code-smells-and-feels#code-smells-and-feels)) thinks about this - that your tastes develops faster than your abilities.\n\n![Slide from Jenny Bryan (Code Smells and Feels)](images/hedgehog-jenny-bryan.png){fig-align=\"center\"}\n\n## GitHub for research groups\n\nAs you get a better hands-on sense of GitHub's capabilities, you'll be thinking about how to get organized and use this for your own research group.\n\n### Organizations\n\nHere are two examples of GitHub Organizations created as part of Openscapes Champions Cohorts where the content is now developed and maintained to support a broader range of researchers.\n\n-   NASA Openscapes <https://github.com/NASA-Openscapes>\n-   NMFS Openscapes for NOAA Fisheries <https://github.com/nmfs-openscapes>\n\nMany Champions teams create GitHub Organizations for their research group. This is a way for all the work that happens in the research group to be organized in one place, but also clearly attributed and credited by each user who contributes.\n\nYou can explore other Champions teams' GitHub organizations they've created. They're listed under the Cohorts in which they participated:\n\n[NOAA NEFSC](https://www.openscapes.org/blog/2020/03/06/workshop-noaa-nefsc/)\n\n-   Gavin Fay Lab <https://github.com/thefaylab>\n\n[2021 NOAA NMFS Cohort](https://openscapes.github.io/2021-noaa-nmfs/)\n\n-   NWFSC Fisheries Engineering and Acoustic Technologies (FEAT) team <https://github.com/NOAA-FEAT>\n-   NWFSC Protected Salmonids Team <https://github.com/nwfsc-math-bio>\n-   AFSC GAP Survey Data Products <https://github.com/afsc-gap-products>\n\nCS&S Cohort [blog post](https://www.openscapes.org/blog/2021/07/13/css-cohort/); [Cohort repo](https://github.com/Openscapes/css-cohort)\n\n-   Kenai Watershed Forum <https://github.com/Kenai-Watershed-Forum>\n-   WildCo Lab <https://github.com/WildCoLab>\n\nCSU-COAST Cohort [blog post](https://www.openscapes.org/blog/2021/07/08/csu-coast-cohort/); [Cohort repo](https://github.com/Openscapes/csu-coast-cohort)\n\n-   Logan Lab <https://github.com/loganlabcsumb>\n-   Ecological Oceanography Lab at CSUN <https://github.com/ecoocelab-csun>\n-   Claisse Lab \\@ Cal Poly Pomona <https://github.com/ClaisseLab>\n-   Coastal Ecosystems Lab <https://github.com/coastal-ecosystems-lab>\n\n```{=html}\n<!--\nLook at the Cohort READMEs to find links to Team GitHub Organizations.\n\nUpcoming Cohorts  \n[2022 NOAA Southeast Fisheries Science Center (Summer)](https://github.com/Openscapes/2022-noaa-sefsc-summer)\n\n[2022 California State Water Resources Control Board](https://github.com/Openscapes/2022-swrcb)\n\n-->\n```\n```{=html}\n<!--\ninactive or possibly created prior to Openscapes Cohort\n\n[SASI Cohort](https://github.com/Openscapes/2021-sasi)\n\n- Gladfelter Lab <https://github.com/GladLab>\n\n[Fisheries Dependent Data users FDD Cohort](https://github.com/Openscapes/2021-fdd)\n\n- <https://github.com/khyde>\n-->\n```\n#### Should my students create repos in our lab organization?\n\nWhile there are many different approaches that could make sense for your group, our starting recommendation would be that any project happening in the research group gets its own repository, and that repository is in the research group's Organization. This is then clearly part of the research group's work and more findable by past/current/future members. And it can be forked to other accounts at any time.\n\n### Issues\n\nIssues and Projects are a great way to keep organized. See a few examples in the [NOAA Fisheries wiki](https://github.com/nmfs-openscapes/.github/wiki/11-GitHub-Project-Boards#gallery) and Openscapes [How We Work](https://github.com/Openscapes/how_we_work) issues and [Planning](https://github.com/orgs/Openscapes/projects/5) project.\n\n#### How much should I write in a single Issue?\n\nThe \"size\" of each Issue is something you'll get a feel for as you use them more, so don't worry too much about it as you get started. The most common \"size\" of Issue is something you can complete, and close. This might include smaller checklists and conversations, but it is more along the lines of \"change axes labels in my plot\" rather than \"write thesis chapter\".\n\nSome Issues are also used more as reference and shared resources, and might not be closed so they're easier to discover. Depending on your workflow and norms you establish with your group, it might be best to keep those reference issues in a different repository so you don't have lingering open issues in a repo that you like to close issues and move on.\n\nWhen you're logged into GitHub, go to <https://github.com/issues> to see all of the Issues assigned/created/etc for your account!\n\n### Branches\n\nBranches are a really powerful feature for software development, but aren't necessarily the right place for new GitHub users to get started. If there are a small number of people in a single repository and you're all first learning, we'd suggest that you start using GitHub without branches, and focus on checking in with each other as you contribute (see [R for Excel Users](https://rstudio-conf-2020.github.io/r-for-excel/collaborating.html#collaborating-with-github) example collaborating with GitHub from RStudio).\n\n> Aside: Julie Lowndes only worked in the main branch with her small group of Ocean Health Index colleagues for the first 8 years as a GitHub user; it was only when working with the NASA Openscapes Mentors community that she learned how to use branches as software developers do.\n\nBranches are powerful as your teams grow and/or as you become savvier with GitHub and code, so it is good to discuss strategies with them.\n\n#### Should we do everything in a `dev` branch?\n\nFull question: \"Right now any collaborative code in my group has a main branch and a dev branch. All collaborators clone the dev branch and push back to the dev branch on GitHub before anything ever goes to main. Is this best practice?\"\n\nAdvice: This system with the dev branch works so long as the dev doesn't diverge too far from the main branch - the Ocean Health Index project (my old research team) does it that way but it's someone's job for a few weeks at the end of each year making sure the dev branch can merge into main.\n\nAnother approach is to treat each branch as very temporary: you make a branch from main, add your contribution, make a pull request, merge and delete the branch. This is what we've been doing with the NASA Mentors and it's more continuous little updates rather than larger big updates, and I think it works better when working with Jupyter Notebooks, which can cause a lot of merge conflicts.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../include-files.lua","quarto"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":{"light":["cosmo","../../theme.scss"],"dark":["cosmo","../../theme-dark.scss"]},"mainfont":"Atkinson Hyperlegible","code-copy":true,"title":"GitHub strategies"},"extensions":{"book":{"multiFile":true}}}}}