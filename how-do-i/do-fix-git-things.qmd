---
title: "Do and fix things in Git"
---

These are our go-to resources about GitHub; they include philosophy, step-by-step guidance, and troubleshooting. Most examples are with R and RStudio, and are applicable more broadly.

## Excuse Me, Do You Have a Moment to Talk About Version Control?

"[Excuse Me, Do You Have a Moment to Talk About Version Control](https://peerj.com/preprints/3159/)?" Bryan J, 2017, PeerJÂ 

## Happy Git With R

> "Happy Git provides opinionated instructions on how to Install Git and get it working smoothly with GitHub, in the shell and in the RStudio IDE; Develop a few key workflows that cover your most common tasks; Integrate Git and GitHub into your daily work with R and R Markdown."

<https://happygitwithr.com/>

## R for Excel Users

[R for Excel Users](https://rstudio-conf-2020.github.io/r-for-excel/). Lowndes J and Horst A, 2020. Chapter 4 and 8 focus on starting setup and collaboration with GitHub and RStudio

## GitHub artwork by Allison Horst

Includes where things happen (remote vs local) and how to interact between them:

<https://allisonhorst.com/git-github>

## `usethis`

[usethis](https://usethis.r-lib.org/). Wickham H and Bryan J.

> usethis is a workflow R package: it automates repetitive tasks that arise during project setup and development, both for R packages and non-package projects.

## Git Flight Rules

"A guide for astronauts (now, programmers using Git) about what to do when things go wrong."

<https://github.com/k88hudson/git-flight-rules>

This is quite a comprehensive and maintained list of git commands, using the command line.

## GitHub: A beginner's guide to going back in time (aka fixing mistakes)

<https://ohi-science.org/news/github-going-back-in-time>

This has screenshots and a workflow with RStudio and the command line.

## Practical R Workflow for Scientists

By Dr. Eli Holmes

<https://rverse-tutorials.github.io/RWorkflow-NWFSC-2022/week1.html>

## Oh Sh*t, Git!?!

[Oh Sh*t, Git!?!](https://ohshitgit.com/). Swear-free version: [Dangit, Git!?!](https://dangitgit.com/)

> Git is hard: screwing up is easy, and figuring out how to fix your mistakes is [nearly] impossible. Git documentation has this chicken and egg problem where you can't search for how to get yourself out of a mess, unless you already know the name of the thing you need to know about in order to fix your problem.

> So here are some bad situations I've gotten myself into, and how I eventually got myself out of them in plain english.

## Not just for programmers

[Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution](https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.14108) Braga et al 2023 provides 12 ways researchers in ecology and evolution use GitHub, as well as resources and examples of researchers using and learning GitHub. 


