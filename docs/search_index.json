[["index.html", "Openscapes Champions Lesson Series Chapter 1 Welcome 1.1 Cohort Agendas 1.2 About", " Openscapes Champions Lesson Series Openscapes team 2022-01-31 Chapter 1 Welcome Hello! This book is the lesson series for the Openscapes Champions program, an open data science mentorship program for science teams. Openscapes Champions is a professional development and leadership opportunity for teams to reimagine data analysis &amp; stewardship as a collaborative effort, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research communities. Cohorts are ~7 research teams (~35 total participants including team leads and members) that convene remotely to explore open data science tooling and practices together. This is a remote-by-design program since its launch in 2019. Artwork by Allison Horst This open curriculum is improved iteratively and the most recent version always available online. Chapters accompany slide decks that are taught through Cohort Agendas (below), depending on the Cohort duration. The lesson series is originally framed around “Our path to better science in less time using open data science tools” (Lowndes et al. 2017). As we learn and iterate with Cohorts of different durations and from different disciplines, the curriculum will iterate and grow as well. 1.1 Cohort Agendas Research teams participate as a cohort over several months, meeting twice-monthly for 1.5-hour sessions we call Cohort Calls. Cohort Calls are designed to be engaging, requiring discussion and active participation through shared live notetaking in Google Docs and video as a group and breakout groups. Cohort Call agendas and slides are all openly available in a Google Folder, and identified individually in the following tables. As we continue to learn and iterate from working with different research groups, you can always review the agenda archive for specific cohorts. Additionally, we end each lesson by learning hands-on efficiency tips, compiled here as an Efficiency Tips Doc and Spreadsheet. Between Cohort Calls, each team meets together for a Seaside Chat to begin identifying and addressing shared needs; Seaside Chats have been described by participants as one of the most valuable parts of the Champions Program. Additionally, we coordinate skill-building Clinics and Co-Working sessions (which differ from “Office Hours” because participants come to work and learn together) between Cohort Calls. 1.1.1 Two-month The two-month Champions program includes 4 Cohort Calls and 1 GitHub Clinic. The core lesson series focuses on building an open science mindset, building efficiency and open culture within the team, and building sustained learning practices with broader communities. At the end of the program, each team describes their trailhead and pathways forward. Cohort Call Agendas Series Chapters Between Cohort Calls 1. Openscapes mindset mindset, better science in less time Seaside Chat (trailhead) 2. GitHub for publishing &amp; project management publishing, project management Seaside Chat: shared organizing with GitHub 3. Team culture and data strategies for future us team culture, data strategies Seaside Chat (code of conduct);Co-working 4. Open communities and coding strategies for future us open communities, coding strategies Seaside Chat (pathway); Co-working 5. Pathways share and next steps 1.1.2 Four-month The four-month Champions program includes 8 Cohort Calls and 2 Clinics. Beginning with the core lessons from the two-month program, we work with partners to co-develop new curriculum specific to a community. Cohort Call Agendas Series Chapters Between Cohort Calls 1. Openscapes mindset mindset, better science in less time Seaside Chat (trailhead) 2. GitHub for publishing &amp; project management publishing, project management Seaside Chat: shared organizing with GitHub 3. Team culture and data strategies for future us team culture, data strategies Seaside Chat (code of conduct);Co-working 4. Open communities and coding strategies for future us open communities, coding strategies Seaside Chat (pathway); Co-working 5. Pathways share and next steps &gt; Skillbuilding Clinic &lt; 5. Art of writing methods Seaside Chat; Co-working 6. Peer review of methods Seaside Chat; Co-working 7. Tricky details discussion Seaside Chat; Co-working 8. Pathways share #2 1.2 About The Series is written (and always improving) to be used as a reference, to teach, or as self-paced learning. And also, awesomely, it’s created with the same tools and practices we will be talking about: R and RStudio — specifially bookdown — and GitHub. Openscapes is co-directed by Julia Stewart Lowndes and Erin Robinson. It is operated by the National Center for Ecological Analysis &amp; Synthesis (NCEAS) and was incubated by a Mozilla Fellowship awarded to Lowndes in 2018.   Openscapes is licensed under a Creative Commons Attribution 4.0 International License. "],["overview.html", "Chapter 2 Overview 2.1 Why we’re here 2.2 What to expect 2.3 What’s possible with open data science (demo) 2.4 What we’ll learn 2.5 Deliverables 2.6 Additional reading", " Chapter 2 Overview Welcome. Our vision is a scientific culture that is more efficient and collaborative, and can uncover environmental solutions faster. This Series is going to be fun and empowering! We will talk about a lot of tools and practices to make your science more streamlined. This is really powerful, cool stuff, and not just for data: I made and published this book using the tools and workflows we’ll talk about. The first half of the Series focuses on efficiency and open culture within the lab, and the second half is about sustained learning and bringing these practices to the broader campus community. 2.1 Why we’re here We are passionate environmental scientists studying important, time-sensitive topics using data of all kinds. And we were never taught to work efficiently with data. We are here because I know these files are on your computer — we all have them. data_final_final.xls data_final_usethis.xls ... thesis_v16_new_ch1.docx thesis_v16.docx ... And we also send and receive emails with subject lines like: Re:FWD:Fwd:Data question Re:Sending again with the correct version We are going to talk about how to make the data experience better, for you, your lab, your department, and beyond. Data analysis can be inefficient and demoralizing when you’re without the right tools/skills and you feel alone. But! Open tools, practices, and communities exist that are powerful and empowering, and game-changing for science. And we can learn and use open practices for science. They are like the Force from Star Wars: More powerful than you ever imagined Helps you solve your current question powerfully – but also broadens the scope of the questions you can ask Learn from jedis, pass on what you have learned, have a ton of awesome allies (and not all allies are jedis) 2.2 What to expect 2.2.1 This is going to be fun and empowering! We are going to be discussing a wide range of topics and working to seed habits for you to engage and learn with them with our lab and others on campus. 2.2.2 Exposure to relevant tools &amp; practices, confidence &amp; agency to engage, community to learn with The plan is to expose you to a lot of great tools and practices that you can have confidence using in your research. We will also spend time helping you plan how to actually incrementally weave them into your existing workflows. The point is not to overwhelm you or make you feel like it’s too late for you or that you would need to throw out and redo everything you’ve ever done in order to take the first step. No. By seeing what’s possible and how shared practices can make your own life easier, and life easier and more streamlined and fun with your lab and beyond, you’ll start experimenting with these practices and in a few years you will be working in a completely different way. 2.2.3 Create a shared culture – in your lab, on campus, and beyond We’re going to go through a lot and it’s less important that you remember it all. More importantly, you’ll know what is possible, have confidence that you can do it, and have allies so you’re not alone. The main thing to take away is that there are good ways to approach your analyses; we will teach you to expect that so you can find what you need and use it! A theme throughout is that tools exist and are being developed by real, and extraordinarily nice, people to meet you where you are and help you do what you need to do. If you expect and appreciate that, you will be more efficient in doing your awesome science. 2.2.4 No skills required. We will strategize about general approaches, specific examples using R/RStudio and GitHub There are no skills required to participate, and we will not be teaching hands-on how to code or set up databases. But we will be talking about how these are important and fit together in the big picture, and how to get started learning the skills you need. This is an opportunity to discuss existing tools and how to engage, meet other labs, discuss next steps, and stay accountable. We’ll talk about tools and practices broadly, but also with specific examples using R and GitHub. Won’t that software eventually become outdated you say — is it worth learning them over something else? The answer is yes, software will change and become outdated; it always has. But seeing what is possible and becoming versed in embracing existing architecture and practices will set you up to make whatever transition comes, and you will make this transition with the community, not along. Your skills will be transferrable skills as the actual software changes. Analogy: if you learn one musical instrument, you will be able to learn another one more fluidly than if you have never learned one to begin with because maybe you can read music, understand something about timing and rhythm, etc. 2.2.5 Everyone is coming with different experiences &amp; expectations Everyone in this workshop is coming from a different place with different experiences and expectations. But everyone will learn something new here, because there is so much innovation in the data science world. You are encouraged to ask questions and answer those of others. 2.2.6 We are all learning together These tools are new to all of us, and the best ideas come from questions from anyone. If you are already familiar with some of this material, think about how your experience was learning it, and how you might teach it to others. Use these workshop materials not only as a reference in the future but also for talking points so you can communicate the importance of these tools to your communities. A big part of this Series is not only for you to learn these skills, but for you to also teach others and increase the value and practice of open data science in science as a whole. 2.2.7 Vulnerability: yes! Shame: no. Shame is not allowed here. No “I’m 34 and haven’t learned GitHub, it’s too late for me” or any of that. We have never had the opportunity to learn these things, there should be no shame on your part for that. It takes a lot of time and dedicated effort to learn and employ these practices, and they should be valued and taught. That’s why you’re here now, you should be proud that you are taking the initiative and your time to do this. No shame. Vulnerability, however, will be involved in this Series. Vulnerability is a big part of learning and trying new things — this is a safe place for everyone to learn. Vulnerability is taking stock of where you are now and help you map out where you want to be. Being vulnerable is scary. But it shouldn’t be lonely: we all have data confessions that would love to talk about and get help with, if only our scientific culture said that was OK; if only we knew how to articulate our questions and have someone to ask. This is a place to share our vulnerabilities to ignite real change. Ask questions. Whether it’s a keyboard shortcut or philosophy of data workflows, ask and let’s talk about it. 2.2.8 Everyone is welcome here You are all welcome here, please be respectful of one another. We are setting a tone of mutual respect and a space place for learning where we assume good intentions and interact with kindness and empathy. Pass it on. 2.3 What’s possible with open data science (demo) R for automation, visualizations github for collaborating (code, text) bookdown websites github for project management organize by project, i.e., keep that code and those methods in same parent folder, rather than all the R code you’ve ever written being in a giant folder, spanning projects public &amp; private issues, tagging people on commits, kaban board Live: fix a tpyo and republish the book/page 2.4 What we’ll learn 2.4.1 Expect that there is a better way Seeing what’s possible opens up what you expect. There is a bit of a chicken and egg issue here: you need to be exposed to things so you know what’s possible and what skills to develop, but you need to kind of know what to look for so you can absorb what you are exposed to. 2.4.2 Have agency to find it Break down that “I teach you learn” model. We are all here to learn and improve. Learning horizontally. This series is not about micro-managing your science but about providing guidance &amp; structure so that everyone in the lab is not silently struggling to reinvent the wheel and coming up with weird homegrown data approaches. What skills you should have and what you should be thinking of, along with some of the tools you can use. Will be building out the Resources page on the website for this purpose. And search the blogs. 2.4.3 Have community to learn with No more silently struggling &amp; reinventing the wheel &amp; creating weird, homegrown workarounds. Embrace emerging and established community best practices 2.4.4 Identify what skills and tools you need, map next steps &amp; learn 2.5 Deliverables aka Outcomes. Be champions for open data science (in your groups, departments, communities.) A more open culture in your group dedicated lab meetings to discuss data workflows “Seaside chats” (&lt;- this is what we call them at OHI) stated code of conduct or lab group philosophy beginnings of a lab roadmap of shared data workflows A growing community of practice on campus study groups / coding clubs (ex: Eco-Data-Science) hacky hours 2.5.1 What would you do in a Seaside Chat? Example topics from the Ocean Health Index: Let’s have READMEs so we know what the heck things are Set up Zotero with RMarkdown Filepath woes: use .Rprojects Where to put data – here’s how our server works Filepath woes 2: use the new here package! Let’s plan a lab “hackathon” to move these .xls to .csv files we store on Github 2.5.2 What would you do in a Study Group? Example lessons from Eco-Data-Science (&lt;- all lessons linked “previous sessions”) Introduction to GitHub Text analysis in R Spatial analysis in R Free websites with RMarkdown Animated plots in R with ggplot2 &amp; gganimate Intro to Python 2.5.3 Assignments There will be assignments between each call that should take about two hours over two weeks. Assignments are designed to be done during lab “Seaside chats”, weekly meetings to discuss data workflows and establish shared practices. Assigned after each call. Do them collaboratively during lab “Seaside chats”. They should take take 2 hours (over 2 weeks). Come prepared to debrief in the following Cohort Call! 2.6 Additional reading Practical Computing for Biologists. Introduction to the Terminal/command line, introduction to regular expressions. Chapter 2 alone is incredibly powerful Virtual meetings https://opensource.com/article/20/6/remote-meetings https://aspirationtech.org/blog/virtualmeetingpowerdynamics "],["mindset.html", "Chapter 3 Openscapes Mindset 3.1 Data science as a discipline 3.2 Open data science tools exist 3.3 Open as a way to work 3.4 Lab members as a team 3.5 Learn with collaborators and community (redefined) 3.6 The internet as an underleveraged tool for science 3.7 Additional reading", " Chapter 3 Openscapes Mindset The Openscapes mindset is about moving away from lonely, individual science and towards science that is more efficient, open, collaborative, inclusive and kind. Slides that have been presented during Champions Program Cohort Calls: Openscapes mindset Please also see the above slides as this chapter is developed more. Open data science tools, practices, &amp; communities exist and are powerful and empowering, and game-changing for science. They enable us to do better science in less time. They are like the Force from Star Wars: More powerful than you ever imagined Enable you to broaden the scope of the questions you can ask You can be a Jedi to others: pass forward what you’ve learned You can join &amp; build diverse communities of allies (not all allies are Jedis) We can harness this power for science more broadly. We can create the culture that we want to be a part of – towards kinder science. We can do this with the Openscapes mindset: Be efficient, open, collaborative, inclusive, and kind Reframe data analysis as a collaborative effort rather than an individual burden or personal craft Redefine collaborators &amp; community: Future You, Future Us Think like a team: share imperfect work and learn together Beyond your own discipline, and online Reimagine challenges: Expect there is a better way Iterate with confidence, agency, &amp; community You’re not alone, it’s not too late Our approach to help develop this mindset is by focusing on the following: Data science as a discipline Open as a way to work Group members as a team Collaborators and community (redefined) as a way to learn The Internet as an underleveraged tool for science 3.1 Data science as a discipline Alternative title: “Data science is a thing”. No matter what your study system or your question, to Do Your Science you will need to get your data into analytical software, wrangle it (tidy and transform), and make sense of it visually and with models. Very important here: tidy your data first, don’t build your whole analysis around whatever weird format your data may have come in. We’ll talk about tidy data in more detail another day. R for Data Science 3.1.1 There are concepts, theory, and tools for thinking about and working with data Just like a field chemistry has concepts for things like moleculte, theory for how they work, and tools for studying them, so does data science — for data. 3.1.2 Emphasis on communication It is incredible what is possible on the communication front. Watch this one-minute video called What is RMarkdown? to blow your mind. 3.1.3 Not just for “big data” or AI or machine learning You can use data science theory and tools no matter the size or context of your data. 3.1.4 Your study system is not unique when it comes to data Think about your data separately from your study system. Don’t confound them or it will be really hard to ask for help. Expect there is a way to do what you want to do. This will help you find commonalities and unite you with other lab members and beyond. 3.1.5 Distinguish data questions from research questions, learn how to ask for help 3.2 Open data science tools exist 3.2.1 Tools to match data science theory Wickham 2017 3.2.2 They exist to streamline working with data 3.2.3 And they are developed by actual people – nice people! 3.2.4 My advice 3.2.4.1 Expect there is a better way If you’re making the same plot 10 times, stop. Don’t confound data science with your science. Expect that someone has had your problem before or done what you want to do. 3.2.4.2 Divorce your science question from the data science question Focus on the operations for the data, not your hypothesis 3.2.4.3 Google your question (ask for help) Articulate it, and identify useful solutions Trusted urls, recent dates 3.3 Open as a way to work 3.3.1 Open science as a way to be more efficient and streamlined Not an added ask at publication to share your data It’s not only about sharing data. It’s about how you work, who you include, and the tools that you use. 3.3.2 External memory (personal and collective) Easier on/offboarding 3.3.3 Find solutions faster – learn to talk about your data 3.3.4 Build confidence – skills are transferable beyond your science 3.3.5 Be empathic and inclusive – grow a network of allies 3.4 Lab members as a team Science is collaborative. Not heads down elbows out. 3.4.1 Focus on what unites lab members, not what sets them apart 3.4.2 Think of the lab horizontally as skillsets &amp; needs instead of vertically as science bins Instead of the skills you have when you come to the lab determining how you will be able to Do Science, have shared practices in the lab and paths to onboard new people to work that way as well. 3.5 Learn with collaborators and community (redefined) Communities for learning, teaching, and mentorship. 3.5.1 Helps overcome isolation, self-taught bad practices, apprehension Stevens et al. 2018 ### Your most important collaborator is Future You Cannot emphasize this enough. Work now so that you can succeed later (whether that’s this afternoon or 4 years from now) 3.5.2 Communities beyond the colleagues in your field 3.5.3 Learn from, with, &amp; for others 3.6 The internet as an underleveraged tool for science 3.6.1 Twitter for learning Follow selectively, listen &amp; learn (e.g. #rstats) 3.7 Additional reading Biased by default: exploring discrimination in research code - Abby Cabunoc Mayes Bioinformatics Community Confference Keynote 2020 "],["bsilt.html", "Chapter 4 Better science in less time 4.1 Ocean Health Index: behind the scenes 4.2 Examples in the wild: environmental science 4.3 Further resources", " Chapter 4 Better science in less time Better science is less time is science that is more efficient, reproducible, open, inclusive, and kind. There are growing examples of better science in less time in environmental and Earth science, and beyond. Here are a few examples to showcase what is possible and being done by the community. Slides that have been presented during Champions Program Cohort Calls: Better science in less time Empowering transformational science - Dr. Chelle Gentemann Here we also introduce the Pathway document that teams will develop throughout the Champions program. The Pathway is based on Table 1 in Lowndes et al. 2017, and helps teams deliberately identify data workflow practices and next steps to facilitate efficiency and open culture in terms of reproduciblity, collaboration, communication, and culture. 4.1 Ocean Health Index: behind the scenes Some key points to discuss from Lowndes et al. 2017, Nature Ecology &amp; Evolution: Our path to better science in less time using open data science tools: Reproducibility &amp; communication enabled by open tooling Shared practices are useful beyond shared projects If you’re interested in more overview of the OHI setup, see this 2017 talk (25 mins): OHI Better science in less time 4.1.1 OHI pathway Motivated by necessity Reimagined by possibility and community Done incrementally! Yes: it’s an investment. Also yes: huge, enduring payoff for (your) science 4.1.2 Reproducibility &amp; communication enabled by open tooling RMarkdown to reimagine data analysis and communication. RMarkdown combines analyses &amp; figures together, rendered to your reporting output of choice. An example: http://ohi-science.org/betterscienceinlesstime/ Website built with R/RMarkdown &amp; Github You can get started too: (1-hour tutorial) 4.1.3 Shared workflows not only useful for shared projects OHI team: we identified as a team &amp; prioritized helping each other We work on many different projects Use same workflows, share feedback, can think together across projects Shared conventions reduce friction &amp; cognitive load Common ground, easier to talk about, easier to ask for help You don’t need to design everything from scratch And, critically: It’s about increasing efficiency and reproducibility and open science. But it is also about increasing participation and inclusion. Consider diversity, equity, and inclusion in your daily practices. How you work and onboard others to your projects is a DEI issue. 4.2 Examples in the wild: environmental science Regime Shifts in R &amp; Data Science within the BC Public Service Observations from the field - Stephanie Hazlitt, Government of British Columbia, slides from CascadiaRconf keynote NMFSReports: Easily write NOAA reports and tech memos in R Markdown! - Emily Markowitz, NOAA Alaska Fisheries Science Center, slides from CascadiaRconf talk Automated reporting in Tampa Bay with open science - Marcus Beck, Tampa Bay Estuary Program, Openscapes blog TBEP’s Data Management Workflow and open science cake 4.3 Further resources 4.3.1 Not so standard deviation podcast Parker &amp; Peng http://nssdeviations.com Great discussions about data concepts and “in the wild” Episode 9: Spreadsheet drama 4.3.2 Practical computing for biologists Haddock &amp; Dunn http://practicalcomputing.org/ Software &amp; computing concepts already on your computer Chapter 2: Regular expressions "],["team-culture.html", "Chapter 5 Team culture 5.1 Why talk about team culture? 5.2 Deliberately setting the tone 5.3 Open software can facilitate open/shared culture 5.4 Enabling &amp; participating 5.5 Further Resources", " Chapter 5 Team culture We discuss team culture because while we know that diverse teams are more innovative, creating spaces where everyone can do their best work and feel safe to contribute takes intention; it does not happen by default. There is a lot of work to do to improve research culture, and we can lead by example in our own research groups and communities. Slides that have been presented during Champions Program Cohort Calls: Team culture Psychological safety, contributed by Tara Robertson See also the following chapter on Codes of Conduct. 5.1 Why talk about team culture? Role modeling sets a lot of team culture, and there is a lot we can learn and do to deliberately create a scientific culture that we want to be a part of. 5.1.1 Science benefits from diversity And we need to be deliberate about welcoming and including people from diverse backgrounds. A few recent articles from Nature with many more links within: Science benefits from diversity What does it take to make an institution more diverse? 5.1.2 Sexual harassment is rife in the sciences Sexual harassment is rife in the sciences, finds landmark US study. Existing policies to address the issue are ineffective, concludes a long-awaited report from the National Academies of Sciences, Engineering, and Medicine. Most common form is gender harassment: it’s the “put-downs as opposed to come-ons”. 5.1.3 We need to unlearn racism and build antiracist culture in science Ten simple rules for building an antiracist lab - Chaudhary &amp; Berhe, 2020. PLOS Unlearning Racism in Geoscience — URGE 5.1.4 Put your values forward Model the behavior you want to see in your research group &amp; beyond (lab, dept, campus, organization, online) 5.1.5 Building trust Have to build trust and be intentional, don’t hope for organic. How to build (and rebuild trust - Frances Frei 5.1.6 Sustain the culture Overtly showing kindness &amp; a Code of Conduct can filter out people who don’t want to be subject to its enforcement – rOpenSci Labs have people coming and going all the time; how do you set the tone and have it be sustainable? 5.2 Deliberately setting the tone Opening remarks at RStudio::conf 2019, in front of an audience of 1700 at a global software conference, Chief Scientist Hadley Wickham announces the Code of Conduct, how to identify RStudio staff if you need help, and how to mingle with welcoming body posture to invite others to join. This set the tone of the whole conference to be the most positive I have ever attended. 5.2.1 Collegiality We must deliberately set the tone for collegiality to create a positive, inclusive research group environment. Safety and accessibility as parts of inclusion and empowerment. Does everyone feel safe to speak up? Does everyone have channels to contribute? This is especially true as the tech we use evolves. Who can participate? This builds resilience to your research group. If someone needs to leave for a family emergency, maternity/paternity leave, vacation, set yourselves up so your team continue smoothly/ — Angela Bassa RStudio talk Opportunity cost of not doing this. Burnout, people leaving science. 5.2.2 Team efficiency We must deliberately set the tone to create a positive, inclusive research group environment that fuels team efficiency. This means create a team mindset, and focusing on similarities rather differences. We all work on different projects and have different research questions, but we all have to wrangle data, organize version files, have things we don’t know…let’s create a space where we can talk about all this and find common ground to tackle together so we don’t reinvent. There can be an advantage to having team conventions. This can both reduce friction and reinventing the wheel. But there also needs to be room for different skills people come in with. For example, if they’re more efficient in Python, don’t want to force R. But want to create space where folks can interoperate and work together. The tech/software side helps with this, but it’s our mindsets too. We need to be open to it. 5.3 Open software can facilitate open/shared culture A lot to say here, for now, see: https://openscapes.github.io/slides/betterscience/environment-canada https://blogs.scientificamerican.com/observations/open-software-means-kinder-science/ 5.4 Enabling &amp; participating Here are some ideas that you can support and participate in to learn and create a kinder team culture: 5.4.1 Seaside chats – discuss share data workflows From Michelle Stuart’s blog about the Pinsky Lab’s first Fishbowl chat: This open communication has leaked into the general discussion going on in our open work space. Lab members seem more comfortable with asking teammates for help, and it is exciting to see all of us getting on the same page with our data science.”� 5.4.2 Hackathons or documentation parties – co-create 5.4.3 Social events Get to know each other outside of work. Do some during work hours can include more people who can’t participate after work 5.4.4 Onboarding – how to welcome new people to your research group 5.4.5 Asking for help Create a welcoming environment where they know where to ask for help – They won’t know what questions to ask. Provide structure. 5.4.6 Code of Conduct (next chapter)! 5.5 Further Resources A Practical Guide to Mentoring Across Intersections - Harriot 2020 VanguardSTEM Blog Get it wrong for me: What I need from allies - Carpenter 2020. “Now, when someone asks, ‘what do you need from me’, I say, ‘I need you to learn, I need you to care’. Somehow, we’ve all evolved to underestimate the power of learning and the power of seeking to understand. Knowing what things harm me is a sign that you value me. …Then I want an ally who works to change their individual behavior and change the system around us for the better. Not just one or the other. I want a bunch of people who are interested in becoming allies to me to get it wrong. Because I promise, you will get it wrong, likely more than once. But please get it wrong, for me. Be wrong on my behalf. Try stuff, learn stuff, make attempts, and fail. Embrace the discomfort of not knowing, of not being certain, of not understanding and then be motivated enough to learn and get better. I will give you grace if you give me effort. We are risking our lives; you can risk getting things wrong.” Inclusivity in STEM: Interview with Dr Mica Estrada (video, 17 mins). “Dr. Mica Estrada is a social psychologist and faculty member at University of San Francisco. Her research explores the role of identity and values in influencing the persistence of historically underserved students in STEM.” PEERS micro affirmations Recreating Wakanda by promoting Black excellence in ecology and evolution — Schell et al (2020) Get it wrong for me: What I need from allies — Carpenter (2020) A Practical Guide to Mentoring Across Intersections — Harriot (2020) For Our White Friends Desiring to Be Allies — Ariel (2017) Dr. Dori Tunstall on Respectful Design: Models for Diversity, Inclusion, &amp; Decolonization — Tunstall (2020) Sexual harassment is rife in the sciences, finds landmark US study — Witze (2018) All We Can Save — Johnson &amp; Wilkerson (2020) Braiding Sweetgrass — Kimmerer (2013) "],["code-of-conduct.html", "Chapter 6 Code of Conduct 6.1 Code of Conduct also known as 6.2 Requirements 6.3 Case study: rOpenSci 6.4 Examples to build from 6.5 Further Reading", " Chapter 6 Code of Conduct Please see accompanying slides until this chapter is built out more. Please also refer to Openscapes’ Code of Conduct: https://openscapes.org/code-of-conduct Important for: Conferences &amp; workshops Online communities Labs &amp; departments 6.1 Code of Conduct also known as Community Participation Guidelines Code of Practice Similar ideas: Lab philosophy, mission statement, participation agreements 6.2 Requirements Clear explicit statements Seen and heard – that all participants know about Accessible and discoverable online Mentioned aloud in meetings/interviews/onboarding Avenues for action, identified committees, recusals 6.3 Case study: rOpenSci CoC itself Blog post about the CoC Blog post about creating the CoC — following a community call on the topic. Interesting points: Drafting – make it good and revisit; but not a living doc Adopting and sharing – so people know it exists &amp; where to find it Reporting and enforcing – standardized form can help 6.4 Examples to build from rOpenSci CoC Buffer’s CoC &amp; Why It’s Important For Diversity And Inclusion Mozilla Community Participation Guidelines Template CoC for labs 6.5 Further Reading How Codes of Conduct Are Combatting Open Source’s Diversity Problem — Margaret Rhodes, AIGA Eye on Design "],["data-strategies.html", "Chapter 7 Data strategies for future us 7.1 Data organization in spreadsheets 7.2 Good enough practices in scientific computing. 7.3 Make scientific data FAIR 7.4 Tidy data for efficiency, reproducibility, &amp; collaboration 7.5 Further Reading", " Chapter 7 Data strategies for future us Data strategies are part of a shared workflow strategy: How do we structure data, where do we store and back up data, how do we create metadata, and keep the raw data raw…Here we will discuss personal and team habits for data management and sharing: data strategies for future us. Slides that have been presented during Champions Program Cohort Calls (with guest teachers indicated): Data strategies for Future Us, also presented by Ileana Fenwick Data stategies including data management plans (DMPs) Metadata, contributed by Dr. Jessica Couture Data to Product Workflows, contributed by Dr. Emily Markowitz (video) 7.1 Data organization in spreadsheets This publication by Broman &amp; Woo, 2018 appears in the “Practical Data Science for Stats” collection in PeerJ &amp; American Statistician. It is a delightful read, from the first opening sentences: “Spreadsheets, for all of their mundane rectangularness, have been the subject of angst and controversy for decades.… Amid this debate, spreadsheets have continued to play a significant role in researchers’ workflows. The dangers of spreadsheets are real, however – so much so that the European Spreadsheet Risks Interest Group keeps a public archive of spreadsheet ‘horror stories’…” Broman &amp; Woo share practical tips to make spreadsheets less error-prone, easier for computers to process, and easier to share. And something incredibly cool, it’s the 3rd most downloaded stats paper in the American Statistician, behind 2 papers about p-values (twitter thread). Read their paper for strategies behind their basic principles: Be consistent Write dates like YYYY-MM-DD Don’t leave any cells empty Put just one thing in a cell Organize data as a rectangle (“Tidy data”) Create a data dictionary Don’t include calculations in the raw data files Don’t use font color or highlighting as data Choose good names for things Make backups Use data validation to avoid data entry errors Save the data in plain text files 7.2 Good enough practices in scientific computing. This publication by Wilson et al. 2017 in PLoS Computational Biology follows a previous publication by Wilson et al. 2014: Best practices for scientific computing. In terms of data management recommendataion, they have 2 main themes: work towards ready-to-analyze data incrementally, documenting both the intermediate data and the process embrace the idea of “tidy data”, which can be a powerful accelerator for analysis Read their paper for strategies behind their basic principles (Box 1): Save the raw data. Ensure that raw data are backed up in more than one location. Create the data you wish to see in the world. Create analysis-friendly data. Record all the steps used to process data. Anticipate the need to use multiple tables, &amp; use a unique identifier for every record. Submit data to a reputable DOI-issuing repository so that others can access &amp; cite. The publication also covers: Software: write, organize, and share scripts and programs used in an analysis. Collaboration: make it easy for existing and new collaborators to understand &amp; contribute to a project. Project organization: organize the digital artifacts of a project to ease discovery &amp; understanding. Tracking changes: record how various components of your project change over time. Manuscripts: write manuscripts in a way that leaves an audit trail &amp; minimizes manual merging of conflicts. 7.3 Make scientific data FAIR This publication by Stall et al 2019 in Nature, says that all disciplines should follow the geosciences and demand best practice for publishing and sharing data. FAIR data means: ‘Findable’ by anyone using common search tools ‘Accessible’ so that the data and metadata can be examined ‘Interoperable’ so that comparable data can be analysed and integrated through the use of common vocabulary and formats ‘Reusable’ by others through robust metadata, provenance, usage licences “Changes in geosciences policy and practice elevate data to valuable research contributions rather than files that are shoved in as an afterthought.” Read their paper for strategies and examples behind changing the culture: There are three big changes are crucial to shift research culture across all disciplines: Make depositing open and FAIR data a priority for all. Recognize and incentivize FAIR data practices. Fund global infrastructure to support FAIR data and tools. 7.4 Tidy data for efficiency, reproducibility, &amp; collaboration By Lowndes &amp; Horst 2020, posted on the Openscapes blog: an illustrated series to tell a story about tidy data. Tidy data has been mentioned in each of the above, as a way to organize data in spreadsheets, to prepare ready-to-analyze data, and for sharing with the FAIR principles. So what is tidy data? First, a preamble: Raw data may not be stored in a tidy way “Wrangling” data into tidy structure should be done programmatically as part of the analytical process - keep the raw data raw Tidy data is a philosophy There are existing tools to help Remember that “tidying data (“data wrangling”) – up to 50–80% of a data scientist’s time” Lohr 2014, New York Times, so it’s important to leverage these existing philosophies and tools. When we talk about organizing data to help us work in an efficient, reproducible, and collaborative way, we are talking about TIDY DATA. We mean deliberately thinking about the shape and structure of data – something that might not seem super exciting but is truly game-changing. So let’s talk about what tidy data is and why it is so empowering for your analytical life. 7.4.1 What is tidy data? Tidy data is a way to describe data that’s organized with a particular structure – a rectangular structure, where each variable has its own column, and each observation has its own row (Wickham 2014). This standard structure of tidy data led Hadley Wickham to describe it the way Leo Tolstoy describes families. Leo says “Happy families are all alike; every unhappy family is unhappy in its own way”. Similarly, Hadley says “tidy datasets are all alike, but every messy dataset is messy in its own way”. 7.4.2 Tidy data for more efficient data science Tidy data allows you to be more efficient by using existing tools deliberately built to do the things you need to do, from subsetting portions of your data to plotting maps of your study area. Using existing tools saves you from building from scratch each time you work with a new dataset (which can be time-consuming and demoralizing). And luckily, there are a lot of tools specifically built to wrangle untidy data into tidy data (for example, in the tidyr package). By being more equipped to wrangle your data into a tidy format, you can get to your analyses faster to start answering the questions you’re asking. 7.4.3 Tidy data for easier collaboration Tidy data makes it easier to collaborate because our friends can use the same tools in a familiar way. Whether thinking about collaborators as current teammates, your future self, or future teammates, organizing and sharing data in a consistent and predictable way means less adjustment, time, and effort for all. 7.4.4 Tidy data for reproducibility and reuse Tidy data also makes it easier to reproduce analyses because they are easier to understand, update, and reuse. By using tools together that all expect tidy data as inputs, you can build and iterate really powerful workflows. And, when you have additional data entries, it’s no problem to re-run your code! 7.4.5 Tidy data for the win! Once you are empowered with tools to work with tidy data generally, it opens up a whole new world of datasets that feel more approachable because you can work using familiar tools. This transferrable confidence and ability to collaborate might be the best thing about tidy data. So for more efficient, reproducible, and collaborative analyses, make friends with tidy data! 7.4.6 Learn more about tidy data: 7.5 Further Reading Wickham, H (2014). Tidy Data. Journal of Statistical Software 58 (10). jstatsoft.org/v59/i10/ Broman, KW and KH Woo (2018). Data Organization in Spreadsheets. The American Statistician 72 (1). Available open access as a PeerJ preprint. Grolemund, G &amp; Wickham, H (2016). R for Data Science: Ch 12 (Tidy Data) https://r4ds.had.co.nz Leek, J (2016). How to share data with a statistician "],["coding-strategies.html", "Chapter 8 Coding strategies for future us 8.1 Software considerations for coding 8.2 WTF: What They Forgot to teach you 8.3 Source files 8.4 Filepaths 8.5 Project oriented workflows 8.6 Further reading", " Chapter 8 Coding strategies for future us Coding strategies can blend with workflow strategies, and the idea is working in a way that is not just for you in this moment. Here we will discuss good coding practices for beginning and seasoned coders alike that make it easier to work with other people, times, and computers. Slides that have been presented during Champions Program Cohort Calls (with guest teachers indicated): Coding strategies for future us See previous iterations: Filepaths and Project-oriented workflows Expanding ouR community!, contributed by Dr. Chanté Davis State of the Ecosystem Product Development Workflow, contributed by Kim Bastille 8.1 Software considerations for coding The following advice is from Tiffany Timbers, UBC Data Science, Intro to Reticulate: You will need these software tools: Programming language (R, python) Code editor (RStudio IDE, Jupyter) Version control software (git, GitHub/bitbucket) How to choose the “best” tool for the job: Reproducible and auditable Accurate Collaborative (and portable) If you’re choosing between R, Python, and other modern languages, they will aready be reproducible, auditable, and accurate. That leaves collaboration – what do your collaborators use? What do folks in your lab, or field use? What is mentioned in the papers you read? There is increasing interoperability between languages (e.g. see reticulate to run python code from R) so when you have some idea it’s best to get started! See also: Opinionated analysis development (Parker 2017). Tools like RStudio are already doing this to help you. Reserve your mental energy for the fun part of the analysis! 8.2 WTF: What They Forgot to teach you Most of this advice comes directly from Jenny Bryan &amp; Jim Hester’s awesome course What they Forgot to Teach You About R. I highly recommend reading Chapters 1-4 that go into much better detail than the notes here. The advice here is solid coding practices for any language, with examples from R. 8.2.1 Workflow versus product Distinction between things you do because of personal taste &amp; habits (“workflow”) versus the logic and output that is the essence of your project (“product”). Workflow: Editor you use to write code. Name of your home directory. R code you ran before lunch. Clearly product: - Raw data. - R code someone needs to run on your raw data to get your results, including the explicit library() calls to load necessary packages. (script, notebook) Ideally, you don’t hardwire anything about your workflow into your product. 8.3 Source files What are they and why? Code that creates objects is “source code”. Source code is essentially text files you edit in a text editor that is then executed in the console. Examples: .R, .Rmd .py .m 8.3.1 Save the source, not the workspace Save the source code; do not save the R object itself. Save your commands as “scripts” (.R, .py) or “notebooks” (.Rmd, ipynb). It doesn’t have to be polished. Just save it! Everything that really matters should be achieved through code that you save – including objects and figures The contrast is storing them implicitly or explicitly, as part of an entire workspace, or clicking via the mouse. Load libraries/packages at the top. Just like a recipe: tell us the ingredients need before we get going! 8.3.2 Always start R with a blank slate Saving code is an absolute requirement for reproducibility. When you quit, do not save the workspace to an .Rdata file. When you launch, do not reload the workspace from an .Rdata file. In RStudio, set this via Tools &gt; Global Options. 8.3.3 Restart R often during development “Have you tried turning it off and then on again?” – timeless troubleshooting wisdom, applies to everything If you use RStudio, use the menu item Session &gt; Restart R Additional ways to restart development where you left off, i.e. “re-run all the code up to HERE” 8.3.4 Avoid rm(list = ls()) It’s common to see scripts begin with this object-nuking command: rm(list = ls()) This is highly suggestive of a non-reproducible workflow. The problem with rm(list = ls()) is that, given the intent, it does not go far enough. It only deletes user-created objects from the global workspace. Instead, Restart R with a clean slate OFTEN (e.g. many times/day), and write every script assuming it will be run in a fresh R process 8.4 Filepaths Every saved thing gets a unique path. Your code needs to run from somewhere specific. And when it interacts with other things (data or other code), you need to tell your code where things are. The more deliberate you are about where things live, The easier it will be for you and future you The easier it will be for other people The easier it will be on another computer 8.4.1 setwd(“path/that/only/works/on/my/machine”) The chance of setwd() having the desired effect – making the file paths work – for anyone besides its author is 0%. It’s also unlikely to work for the author one or two years or computers from now. Hard-wired, absolute paths, especially when sprinkled throughout the code, make a project brittle. Such code does not travel well across time or space. 8.4.2 setwd() BUT, if you still decide to use setwd() in your scripts, you should at least be very disciplined about it: Only use setwd() at the very start of a file, i.e. in an obvious and predictable place. Always set working directory to the same thing, namely to the top-level of the project. Always build subsequent paths relative to that. 8.4.3 R users: use the here package here() identifies your project’s files, based on the current working directory at the time when the package is loaded. library(here) here() 8.5 Project oriented workflows 8.5.1 Dilemma and Solution Problem statement: We want to work on project A with the working directory set to path/to/projectA (my data analysis) and on project B with the working directory set to path/to/projectB (my teaching material). But we also want to keep code like setwd(“path/to/projectA”) out of our scripts. Solution: Solution: use an IDE that supports a project-based workflow. An integrated development environment (IDE) offers: a powerful, R-aware code editor many ways to send your code to a running R process other modern conveniences And it eliminates: temptation to develop code directly in the Console. (instead:.R!) tension between development convenience and portability of the code. 8.5.2 Organize your work into projects Here’s what I mean by “work in a project”: File system discipline: put all files related to a project in a designated folder. This applies to data, code, figures, notes, etc. Depending on project complexity, you might enforce further organization into subfolders. Working directory intentionality: when working on project A, make sure working directory is set to project A’s folder. Ideally, this is achieved via the development workflow and tooling, not by baking absolute paths into the code. File path discipline: all paths are relative — relative to the project’s folder. Synergistic habits: you’ll get the biggest payoff if you practice all of them together. Portability: the project can be moved around on your computer or onto other computers and will still “just work”. is the only practical convention that creates reliable, polite behavior across different computers/users/time. This convention is neither new, nor unique to R. It’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety. 8.5.3 RStudio Projects The RStudio IDE has a notion of a (capital “P”) Project, which is a very effective implementation of (small “p”) projects. Project have an.Rproj file in the folder, which is used to store settings specific to that project. Use File &gt; New Project … to get started. Allows for multiple projects no danger of crosstalk: each has own R process, global workspace &amp; working directory Same “unit” as a GitHub repo! 8.5.4 Tips for RStudio Projects One suggestion for organizing: Have a dedicated folder for your Projects. - If you have One Main Place for Projects, then go there in Finder/File Explorer to launch any specific project with .Rproj. - Mine is called “~/github/”. Switching Projects: RStudio knows about recent Projects. 8.5.5 Name files deliberately Jenny Bryan’s 3 rules for Naming Things: machine readable human readable plays well with default ordering Available from Speakerdeck 8.6 Further reading Tidyverse Skills for Data Science - Wright, Ellis, Hicks, &amp; Peng Principles for data analysis workflows - Stoudt, Vasquez, and Martinez 2021, PLOS Computational Biology R Cookbook — JD Long "],["communities.html", "Chapter 9 Open communities 9.1 What are open communities? 9.2 Why engage with open communities? 9.3 How to get started? 9.4 Examples in the wild: campus coding clubs", " Chapter 9 Open communities Open communities play a big role in advancing research, helping research feel less lonely and reducing the amount of time we all spend being stuck spend reinventing the wheel. This is a brief (incomplete) introduction to the idea of open communities. We will explore: What are open communities? Why engage with them? How to engage with them? And also how Twitter as a legit tool for coding and science. Originally focusing on R communities, we are adding more examples beyond. Slides that have been presented during Champions Program Cohort Calls: Open Communities, which we go through in a Cohort Call Discovering Community Tools, which teams review during a Seaside Chat 9.1 What are open communities? Open communities are groups of people openly creating, sharing, teaching, collaborating. They are united around a shared interest: coding language, topic, discipline, etc. They have a culture of shared &amp; continued learning, prioritize diversity, equity, inclusion. They have online and in-person activities. Here are some examples of communities. Read more &amp; direct links: https://rstudio-conf-2020.github.io/r-for-excel/collaborating.html#r-communities Some #rstats communities with in-person and online events and channels There are strategies for learning with both online and local communities. 9.2 Why engage with open communities? Skillshare (teach &amp; learn) Coding, software, workflows Collaboration, leadership, DEIJ Meet allies, grow friendships, career opportunities Help improve science &amp; scientific culture Increase visibility &amp; value of coding, data, collaboration skills Drive change: modern ways to contribute to science. Formally incentivize and teach! Include in promotion/tenure (we shouldn’t really have to teach ourselves on our own time and not be credited), create jobs Carry on &amp; forward your experience from Openscapes 9.3 How to get started? Google your interests/needs. When you Google, include what you want to do PLUS r, rstats; python. Start by listening and learning. Be deliberate: curate who you follow. Like and share when you’re comfortable. Then, contribute – your ideas, your blogs, your papers, your code… Contributors are welcome in open communities! And know too that the R packages ggplot &amp; knitr were created by students (Wickham &amp; Xie) (see McBain 2019). Finally, Twitter is a legit tool for science. It’s a good way to learn what you need to learn and broadening your horizons while building community. Some places to start: #rstats, #rstatsES, #rspatial, #pydata, #BlackAndSTEM, #MeTooSTEM Seaside Chats are a great way to start exploring together. 9.4 Examples in the wild: campus coding clubs EcoDataScience at UC Santa Barbara BioData Club at OHSU The Bio-Data Club at Moffitt "],["github-pub.html", "Chapter 10 GitHub for Publishing 10.1 Preamble 10.2 What is GitHub? — Traditional answer 10.3 What is GitHub? — Non-traditional answer 10.4 GitHub framework in a nutshell 10.5 GitHub Orientation 10.6 Editing files from GitHub. 10.7 Further resources", " Chapter 10 GitHub for Publishing GitHub is a powerful tool for collaborative coding with version control, but in the next two chapters we are going to focus on some of its lesser-celebrated awesomeness: GitHub for publication and project management. We will focus on how to use GitHub for collaboration and communication for science, and spend time with hands-on practice. Slides that have been presented during Champions Program Cohort Calls: GitHub Clinic 10.1 Preamble We are going to work with GitHub from the browser only, because it makes the best use of our short time together. It is also a powerful way for folks to contribute and collaborate even if they are not involved in day-to-day hands-on analysis. So this might be good for new lab members or students to contribute to your lab as soon as possible. GitHub can reduce friction for open science: it gives us avenues for communicating and publishing methods, blogs, interactive graphics and more, without a lot of heavy lifting! 10.1.1 Prerequisite You will need to create GitHub account at http://github.com, if you don’t already have one. For username, I recommend all lower-case letters, short as you can. I recommend using your .edu email, since you can request free private repositories via GitHub Education discount. 10.2 What is GitHub? — Traditional answer GitHub means GitHub.com; it’s a company that is an online collaborative platform, with some features familiar to social media users. GitHub centers around git, which is powerful version control software for your local computer. This has been around for years, taking care of bookkeeping for you locally on your computer. GitHub makes git’s local bookkeeping collaborative through its powerful online platform. It will weave together all the version control from your local computer with other collaborators you work with. It is used for code and files: organize, archive, bookkeeping, searchable, changes visualized, etc. In the figure below, notice the familiar red and green to denote deletions and additions line-by-line, with darker shading to identify specific text within a line. Also notice the differencing in the image’s color bar! We aren’t going to teach traditional git/GitHub today, but here are some recommendations if you’d like to learn. First, read Jenny Bryan’s “Excuse Me, Do You Have a Moment to Talk About Version Control?” (open-access pre-print from PeerJ, published in The American Statistican). This provides an excellent overview. One quote I like in particular is Collaboration is the most compelling reason to manage a project with Git and GitHub. My definition of collaboration includes hands-on participation by multiple people, including your past and future self, as well as an asymmetric model, in which some people are active makers and others only read or review. - Jenny Bryan, “Excuse Me, Do You Have a Moment to Talk About Version Control?” Next, to learn GitHub with R, the absolute best resource is Jenny Bryan’s Happy Git With R. This is a comprehensive, friendly step-by-step process of how to do so, and is an awesome reference for seasoned git/GitHub users as well. If you want a shorter-form resource, I’d recommend 2 tutorials from OHI-Science’s data-science-training. This also teaches you how to set up GitHub to sync directly through RStudio, so that you don’t have to have any other software (including the command line) open to do so: GitHub Collaborating with GitHub On my local computer, I interact with GitHub through RStudio 99.9% of the time (use command line .1% of time). Upcoming: resources for setting up GitHub without RStudio 10.3 What is GitHub? — Non-traditional answer 10.3.1 Publishing platform It’s for books like this one (openscapes.org/series), websites like openscapes.org, which was built with R’s blogdown package, and interactive dashboards. 10.3.2 Project management system GitHub is also a project management system for short and long-term tasks. It is really powerful to have collaborative “todo”’s in the same software (and user accounts) as all the analysis and all the people that you’re already working with. We will talk about “Issues” &amp; “Projects” in the next chapter. 10.4 GitHub framework in a nutshell 10.4.1 Users vs. organizations Example: jules32 is a user account, openscapes is an organization group. You can think of them like other social media accounts: I can be an individual or part of a group, and there are permissions associated with both. 10.4.2 Repositories (“repos”) Repos are GitHub’s main unit. They are essentially a folder, and you’ll put files and folders in them. They are contained, with permissions specific to each one. It makes it easier to navigate through and find stuff — so you are “not sifting through a zoo of files” as one Openscapes Champion has said. 10.4.3 “Commits” &amp; “commit messages” Unlike Dropbox or Google Drive that constantly and automatically sync to the cloud, you have to deliberately tell git/GitHub when you have an amount of work that you want to be versioned and synced. You have to commit to telling them. GitHub takes care of the backend bookkeeping involved, but you have to write a human-readable message to your future self and others. That is the commit message. There is no absolute guidance for how often to commit, but I think of it as leaving breadcrumbs for yourself. How much work and on what things/in what combination would you like to be able to reverse? What kind of information will make it easier for Future You to work with? 10.4.4 Public vs private You can have both public (the free default) and private repositories, and change these permissions later on. I mostly work in public repos, but if I work in private ones, I often have the expectation that they will be made public some day. So I practice good habits with commits and documentation, and keep conversations on-topic. 10.4.5 The search feature is awesome You are able to search within a GitHub repository, across repositories in an organization, or across all GitHub public repositories. I find this helps me find things quickly if I’m looking for how I’ve used a function in the past, or if I remember a word that would stand out that I included in a commit message as a breadcrumb to myself. It will also search Issues within the repositories, so you can look for specific words in conversations as well. 10.4.6 Branches &amp; Forks We’re not going to talk about branches and forks. These are a core feature of what makes GitHub super powerful for software development, and one of the first things you’ll see in GitHub tutorials geared towards software engineers. But I do not think that is the most relevant or smoothest entryway for those of us who are scientists fairly new to collaborative coding and version control. 10.5 GitHub Orientation This is a demo details upcoming knitr::include_graphics(&quot;img/github-orientation.png&quot;) 10.6 Editing files from GitHub. This is also a demo details upcoming First a Disclaimer: you don’t want to edit from the browser for most things – you would want to “clone” the repo to your local computer and leverage more goodies &amp; power. However, you will sometimes edit in the browser, and it’s a good entry point for us today, and maybe for onboarding folks in your lab in the future. Why not edit in the browser? You don’t want to overwrite each other or forget yourself. Good for quick md editing, not script editing. In the demo, the example .md was a deliberate example of sharing slides from a talk :) What to do: (you all have permissions) Go to https://github.com/openscapes/demo/yourname.md Click on the pencil to edit your file Make many edits &amp; commits with commit messages github.com has a default message, but get into the habit of writing an actual message to yourself/others (breadcrumbs) This is different from saving (cancel if you save!) 10.7 Further resources Git for Humans - Alice Bartlett, 2016 "],["github-issues.html", "Chapter 11 GitHub for Project Management 11.1 Preamble 11.2 What are Issues? 11.3 Issues in the Wild 11.4 How to use Issues 11.5 Strategies for Issues 11.6 Your Turn: Create &amp; comment on issues", " Chapter 11 GitHub for Project Management GitHub is best known as a collaborative coding platform. But of course productive collaboration requires communication, and GitHub has powerful features to support communication and project management through GitHub Issues. (Also see thee previous chapter about GitHub for publishing). Slides that have been presented during Champions Program Cohort Calls: GitHub Clinic 11.1 Preamble We are focusing on GitHub Issues here because they are a powerful way for team members to have active discussions about data and code, and therefore ways to participate in analyses even for those that are not involved in the day-to-day coding. I find Issues not only useful to discuss topics as a team, but I also treat it as my external memory: I write notes to myself, link to files and websites; I leave breadcrumbs for myself so that I am more easily able to remember my past thought processes and pick up projects where I left off. In this way, GitHub Issues help actualize the mindset of Future You and Future Us. This means being deliberate now about communicating decisions and progress so that you or others can work in the future a little more smoothly. Using project management software is a strategy used by every software developer or people working on projects with many moving parts. It streamlines technical discussions with people who are coming/joining a group. It also helps organize and track projects that single or multiple &amp; overlapping users can be a part of. While there are many options for project management software out there, I like using GitHub because it’s already managing my code and my work, and linked to my collaborators so it offers a streamlined way to communicate. It’s also one less account I need to have, which is a huge bonus in my mind. One of the reason we talk about Issues in Openscapes is because they are an excellent way to develop habits for using GitHub for your analytical project more broadly. 11.2 What are Issues? Every GitHub repository (shortened to “repo”) has a feature called Issues. Issues is GitHub’s project management and task-tracking feature. Issues “track ideas, enhancements, tasks, or bugs for work on GitHub.” - GitHub Jenny Bryan has an excellent summary of Issues in her article “Excuse Me, Do You Have a Moment to Talk About Version Control?” (open-access pre-print from PeerJ, published in The American Statistican): GitHub issues are another powerful feature of the platform. Recall that we are repur- posing Git, a tool that facilitates software development. Think of the issues for a project as its bug tracker. For projects that are not pure software development, we co-opt this machinery to organize our to-do list more generally. The basic unit is an issue and you can interact with one in two ways. First, issues are integrated into the project’s web interface on GitHub, with a rich set of options for linking to project files and incremental changes. Second, issues and their associated comment threads appear in your email, just like regular messages (this can, of course, be configured). The result is that all correspondence about a project comes through your normal channels, but is also tracked inside the project itself, with excellent navigability and search capabilities. For software, issues are used to track bugs and feature requests. In a data analysis project, you might open an issue to flesh out a specific sub-analysis or to develop a complicated figure. In a course, we use them to manage homework submission, marking, and peer review. Issues can be assigned to specific people and they can be labelled, e.g. “bug”, “simulation- study”, or “final-exam”. Coupled with the ability to cross-link issues and the project files or file changes, you have extraordinary power to document why things have happened in the past and to organize what needs to happen in the future. You create an Issue for a topic, and use it track progress or ask questions. You can provide links, describe updates, link to other Issues, and you can close the Issue when it is completed. You can also re-open previously-closed Issues. Every GitHub repository has this Issues feature. This means that sometimes Issues are public and sometimes they are private. In a public repo, anyone with a GitHub username can create and comment on issues. In a private repo, only users with permission can create and comment on issues, or see them at all GitHub search is awesome – it will search all of your files and Issues! 11.3 Issues in the Wild Here are some examples of “traditional” and “non-traditional” use of issues. ggplot2’s Issues is an example of what I think is the “traditional” use of Issues, which is in a pretty pure software development context. This is a public repository, and all topics are directly related to ggplot2. Issues are largely used to report bugs, troubleshoot and sometimes to request features. Note the “Filters” feature on the top-left: this by default will search through the Issues that are still open, but you can also change this if you wanted to search also for closed Issues (just below “Filters” you can see that there are over 2000 closed Issues, documenting the innovation that’s been ongoing in ggplot2). MozillaFestival’s Issues are an example of a less “traditional”, but increasingly common use of Issues: for project submissions, coordination, and community engagement. It is also an example of the use of labels: those colorful tags that help group and categorize the Issues. To the right of “Filters”, you’ll see a “Labels” button: clicking on this will give you a list of all the labels and how many Issues are tagged with each label. OHI-Science’s Issues: are also an example of less “traditional” use of Issues but perhaps also somewhat common. This is a private repository, which is why there is no link to these Issues. Here, Issues are used for private conversations and archiving ideas and discussions: the OHI-Science team uses issues instead of email to have private, archived, searchable conversations about scientific methods. We are diligent about having important science conversations in these Issues, rather than those conversations being lost in emails or Slack. This is more organized and also makes onboarding team members much smoother since we do not need to forward emails to new team members. 11.4 How to use Issues Let’s do a demo with Issues. 11.4.1 Creating a new Issue When you click on the green “New Issue” button”, you’re asked to give a Title and Leave a Comment. You can also attach files or images by dragging them into the Issue. Then you’ll be able to Submit the Issue. On the right side, you’ll see options to Assign someone to the Issue, add a Label, add it to a Project, or add it to a Milestone. We’ll explore these features a bit more in a moment. When you click Submit, your Issue gets a number, which is now written next to the title. This number is also part of the URL as well. On the right of the Title, note that there is an “Edit” button if you ever need to change the title of the Issue as the conversation evolves. The Issue number will stay the same. What happens if you want to edit the text of your Comment after you’ve Submitted it? No problem. See that once you’ve submitted an Issue, there is a blue bar at the top of the Comment, attributing your username to this comment along with the date. At the very right of this blue bar, there are 3 dots. Clicking here will give you the option to edit. 11.4.2 Commenting The great thing about Issues is that they are for conversations with yourself and others. So once you’ve submitted an Issue, you can string together additional Comments within this comment. Maybe you asked a question, and someone else will respond with a solution or idea. They might link to an Issue with a related topic, or an external link that might be helpful. You can also tag people in Issue Comments with the “@” symbol. As noted above, anyone who is part of the repository will automatically get email notifications when comments are submitted. But tagging specific users will also send them an email, and is a good way to bring folks into the conversation who might not already be “watching” the whole repository. In a public repository you can tag any GitHub user, and in a private repository they have to have permission. Each time there is a comment in the Issue thread, there will be a new date marked in the blue bar at the top of the Issue. This is a nice way to see how current conversations are. And something really great is that you can click on the date — and watch the URL change. This allows you to anchor to a specific comment within the Issue thread. This is really useful if, for example, you wanted to share a specific comment with someone else instead of having them scroll down themselves. (Note: you can also click on the three dots at the right of the blue Comment header to copy the anchored link). 11.4.3 Markdown Issues support Markdown. This means that you can add simple formatting to your text, such as headers, bold and italics, lists, images, links, and formatted code. To help you use Markdown formatting as you learn, GitHub Issues have built-in help: there are icons between the Title and the Comment of the Issue that will do the Markdown formatting for you, and help you learn along the way. There is also a “Preview” tab between the Title and Comment (next to the “Write” tab, where you are by default) where you can preview what your Markdown formatting looks like before you Submit the Issue. Submitting the Issue will also render the Markdown formatting. GitHub enables you to also create Markdown check-lists by typing - [ ]. Once this is rendered, you can click it to check this box. Alternatively, in Markdown you check a box by typing - [x]. The number of checked and unchecked items will be visible in the Issue as well. 11.4.4 Linking to files Linking to specific files or versions of files is good practice when you are discussing it in an Issue: reduce the work for the person reading the Issue (which might be Future You!). You can link to the file by opening it in the browser and copying its URL and placing it in Markdown formatting for hyperlinks: [text to hyperlink](URL). You can also navigate to a specific version of that file, or a specific commit message, if you want to capture that file at a specific point in time. You can also anchor to specific lines within a file, which is useful if you are requesting feedback on a specific part of an analysis or asking for help troubleshooting. I can send someone to a specific place within a file with the appropriate lines highlighted. For example [important code](https://github.com/Openscapes/issues-demo/blob/master/code-example.R#L12-L13) will render as important code. 11.4.5 Assigning, Labels On the right side of the Issue thread, there is the “metadata” for the Issue. You can assign the Issue to a specific user, or label it with a suite of labels that you can customize (when you click on labels, see all the way at the bottom the option to edit labels. And there are other ways to navigate there as well). If you navigate back to the full list of Issue topics (which will have the URL github.com/username-or-organization/repo-name/issues), you’ll see these metadata categories listed at the top as well, which lets you filter or view based on these categories. 11.4.6 Projects, Milestones Projects and Milestones are further ways to organize and track progress with your Issues. Projects are a way to organize and prioritize your issues. It uses the idea of a Kanban board, which Wikipedia says “visually depict work at various stages of a process using cards to represent work items and columns to represent each stage of the process. Cards are moved from left to right to show progress and to help coordinate teams performing the work.” The simplest have 3 columns labeled “to do”, “doing” and “done”. You can use Projects for both Organization or personal projects. In fact, you can have multiple projects within the same repository, so different people can have different Projects organized within their shared repository, for example. You have a lot of control over how you will manage your Projects; at this point I do not use all the features but have been playing around with using them for Openscapes planning: Milestones are a way to attach deadlines to your Project (although you do not need to identify a date if you don’t want to). Once you create a Milestone, you can add Issues to that Milestone to help track progress. For example, maybe you have a presentation coming up and there are several Issues that need to be addressed before then. 11.5 Strategies for Issues Every repo has Issues, but do you want to use Issues in every repo? It helps to consider the purpose for the Issues. Using Issues for “traditional” bug/features for code, it makes sense to keep the repository public and have all Issues pertaining to that repo there within that repo. If you’re using Issues for “non-traditional” laboratory research group and science conversations, there are other considerations. Maybe you do want a private repository, but even so you’ll want to think ahead. Will you eventually make that repo public when you publish your study? Changing a repo from private to public (or vice versa, both are possible in the repository’s Settings) will make not only the code and files of that repo public, but also all the Issues. Which is fine, but it might add considerations in terms of what is discussed in those Issues. 11.5.1 OHI example Here is an example of the Ocean Health Index team’s thought process &amp; strategy. Our team works within a GitHub Organization called “OHI-Science”. Within that Organization, we work in many repositories, with different combinations of people working primarily within different repositories. Sanity-wise, we didn’t want to have conversations in Issues within each of those repositories because it would make finding those conversations more difficult (although now GitHub can search all Issues/code across an Organization!). We also wanted our repos to be public, but to have private conversations using the Issues feature. These two needs led us to create a single private repository named “issues”, and we only use it for Issues. This works really well for us, especially since our team lead can engage in these discussions by receiving emails about the Issues in his inbox, and can respond without having to go to GitHub.com. 11.6 Your Turn: Create &amp; comment on issues We will break into groups and you can explore some of these features in Issues. Here is what to do: Go to github.com/openscapes/demo/issues Create an issue, tag people in your breakout group (ask for their username) Browse issues, comment in other issues Try: Linking to the .md document you created in the previous chapter Creating a label and applying it, assigning people Adding Issues to a Project (create one if need be) Closing an Issue Have fun! And throughout the process, talk to your breakout group, and share what you learn. Here’s what your inbox will look like afterwards: This is pretty rare to receive so many emails all at once. But you can always switch your setting to “Not Watch” this repository so that you only receive emails about Issues that you are tagged in. "],["r-scicomm.html", "Chapter 12 RMarkdown for scicomm 12.1 books with bookdown 12.2 websites with RMarkdown 12.3 websites with Blogdown 12.4 Further resources", " Chapter 12 RMarkdown for scicomm Coming soon. Slides are best until then. See also Data science as an entryway to open publishing - May 27, 2020: Fireside Chat co-presented with Dr. Nick Tierney at Open Publishing Fest So much potential for public communication, lab protocols and documents, etc. with R. All based on RMarkdown. 12.1 books with bookdown Commit the generated docs/ directory! Then, change the setting in your repo on github.com so that github knows where your book is located so it can publish it. Here’s what to do: go to https://github.com/haudarren/ai_handbook click on settings at the top bar (at the opposite end from code, issues, pull requests) scroll down to the GitHub pages section. Click on Source and change it so it reads master branch /docs folder like below. You should get a green band like below that says “your site is published to username.github.io/reponame” 12.2 websites with RMarkdown simple, static 12.3 websites with Blogdown fancier, dynamic 12.4 Further resources RMarkdown - RStudio (2021) How I teach RMarkdown - Hill (2020) R Markdown for scientists - Tierney (2020) R for Excel Users - Lowndes &amp; Horst (2020) RMarkdown website tutorial - Lowndes (2016) Academic Publications with R Markdown- Ovando 2020 "],["resources-influence.html", "Chapter 13 Resources that influence us 13.1 Talking about data science: Hilary Parker &amp; Roger Peng 13.2 Opinionated data analysis 13.3 Principles for data analysis workflows 13.4 Vulnerability: Brené Brown 13.5 All We Can Save: Ayana Johnson &amp; Katharine Wilkinson 13.6 The Power of Welcome 13.7 The moment of lift: Melinda Gates 13.8 Architecture of Participation: Tim O’Reilly 13.9 The Cathedral and the Bazaar: Eric Raymond 13.10 Systems Change: Donella Meadows 13.11 Organizational architecture 13.12 Disruption can feed creativity 13.13 Kaitlyn Thaney 13.14 Mentorship vs Sponsorship", " Chapter 13 Resources that influence us Some resources that influence our thinking. 13.1 Talking about data science: Hilary Parker &amp; Roger Peng RStudio::conf(2020) keynote &amp; NSSD podcast episode 100 If you want to write, you read a lot, music, you listen a lot. I’ts hard to do this with data analysis. 13.2 Opinionated data analysis 13.3 Principles for data analysis workflows Stoudt, Vásquez, Martinez, https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1008770 workflow describes what a researcher does to make advances on scientific ques- tions: developing hypotheses, wrangling data, writing code, and interpreting results. Workflow: The process that moves a scientific investigation from raw data to coherent research question to insightful contribution. This often involves a complex series of pro- cesses and includes a mixture of machine automation and human intervention. It is a nonlinear and iterative exercise. Importantly, the difficulties we encounter in this [Explore] phase help us build empathy for an eventual audience beyond ourselves. It is here that we experience firsthand the challenges of processing our data set, framing domain research questions appro- priate to it, and structuring the beginnings of a workflow. Documenting our trial and error helps our own work stay on track in addition to assisting future researchers facing similar challenges. 13.4 Vulnerability: Brené Brown Power of Vulnerability: TED Talk Dare To Lead Podcast 13.4.1 Hedgehog concept: Jim Collins Hedgehog concept 13.5 All We Can Save: Ayana Johnson &amp; Katharine Wilkinson All We Can Save Project There is a renaissance blooming in the climate movement: leaderhip that is more characteristically feminine and more faithfully feminist, rooted in ompassion, connection, creativity, and collaboration. …To change everything, we need everyone — All We Can Save Johnson’s frustration with the climate movement isn’t about the current leaders doing a bad job—it’s just that we need more leaders. Her vision of the world includes people from every community in climate leadership roles. — The Marine Biologist Building an Inclusive Climate Movement, Vice All We Can Save is basically a community bound between two covers, and a gift to any who wishes to join in. - Eric Roston, Bloomberg 13.6 The Power of Welcome The Value of Welcome — Stef Butland, rOpenSci 13.7 The moment of lift: Melinda Gates 13.8 Architecture of Participation: Tim O’Reilly It’s Not About You: The Truth About Social Media Marketing (2012). Strategy on community building through modern channels “We tell big stories that matter to a community of users, and together we use those stories to amplify a message that we all care about…And once they start telling their story as part of the bigger story, it suddenly looks like a parade.” Open source paradigm shift I’ve come to use the term “the architecture of participation” to describe the nature of systems that are designed for user contribution. 13.9 The Cathedral and the Bazaar: Eric Raymond The Cathedral and the Bazaar: one of the secrets of open source is “treating your users as co-developers” 13.10 Systems Change: Donella Meadows Leverage points: places to intervene in a system: (in increasing order of effectiveness) Constants, parameters, numbers (such as subsidies, taxes, standards). The sizes of buffers and other stabilizing stocks, relative to their flows. The structure of material stocks and flows (such as transport networks, population age structures). The lengths of delays, relative to the rate of system change. The strength of negative feedback loops, relative to the impacts they are trying to correct against. The gain around driving positive feedback loops. The structure of information flows (who does and does not have access to information). The rules of the system (such as incentives, punishments, constraints). The power to add, change, evolve, or self-organize system structure. The goals of the system. The mindset or paradigm out of which the system — its goals, structure, rules, delays, parameters — arises. The power to transcend paradigms. So how do you change paradigms? Thomas Kuhn, who wrote the seminal book about the great paradigm shifts of science,7 has a lot to say about that. In a nutshell, you keep pointing at the anomalies and failures in the old paradigm, you keep coming yourself, and loudly and with assurance from the new one, you insert people with the new paradigm in places of public visibility and power. You don’t waste time with reactionaries; rather you work with active change agents and with the vast middle ground of people who are open-minded. 13.11 Organizational architecture Cautionary Tales Podcast Ep 6 – How Britain Invented, Then Ignored, Blitzkrieg. This tale is about how the organizational architecture of existing entities - whether the British army, Sony, Kodak, or Xerox - cannot always support their own innovation because of the social structures they were built upon. Fascinating to think about in terms of how open science has not been embraced by scientific communities within the existing academic structure. 13.12 Disruption can feed creativity Cautionary Tales Podcast Ep 7 – Bowie, jazz, and the unplayable piano. This tale is about music: how Keith Jarrett reluctantly played on a broken piano and how David Bowie and Brian Eno’s take on collaboration led to brand new sounds and ideas. I think about this for science and openness - working out of your comfort zones and mixing up how you do it and who you do it with. 13.13 Kaitlyn Thaney Funding research infrastructure there’s also the fact that the current funding model has led to a perceived sense of scarcity, pushing open projects to compete rather than collaborate, to build new features instead of maintaining their work and deepening their level of service for their communities. An additional dimension to our work involves looking at the staffing and human infrastructure powering open technology development, maintenance, governance and stewardship. That volunteer labor and community engagement is often an invisible cost we gloss over in our estimations and recommendations, while also being a core pillar in this work. 13.14 Mentorship vs Sponsorship https://larahogan.me/sponsors/ "],["testing-ohi.html", "Chapter 14 Testing - OHI 14.1 Onboarding Roadmap", " Chapter 14 Testing - OHI 14.1 Onboarding Roadmap The OHI Onboarding Roadmap below outlines 15 hours of training — resources that you can asynchronously watch and read as self-paced learning as your time allows. Please visit each chapter in this book, which provides further details and resources. html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #lledctakyo .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #lledctakyo .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #lledctakyo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #lledctakyo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #lledctakyo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #lledctakyo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #lledctakyo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #lledctakyo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #lledctakyo .gt_column_spanner_outer:first-child { padding-left: 0; } #lledctakyo .gt_column_spanner_outer:last-child { padding-right: 0; } #lledctakyo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #lledctakyo .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #lledctakyo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #lledctakyo .gt_from_md > :first-child { margin-top: 0; } #lledctakyo .gt_from_md > :last-child { margin-bottom: 0; } #lledctakyo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #lledctakyo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #lledctakyo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #lledctakyo .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #lledctakyo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #lledctakyo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #lledctakyo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #lledctakyo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #lledctakyo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #lledctakyo .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #lledctakyo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #lledctakyo .gt_sourcenote { font-size: 90%; padding: 4px; } #lledctakyo .gt_left { text-align: left; } #lledctakyo .gt_center { text-align: center; } #lledctakyo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #lledctakyo .gt_font_normal { font-weight: normal; } #lledctakyo .gt_font_bold { font-weight: bold; } #lledctakyo .gt_font_italic { font-style: italic; } #lledctakyo .gt_super { font-size: 65%; } #lledctakyo .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } OHI Onboarding Roadmap Topic Action Minutes Learn Intro to OHI: Drivers &amp; implications of change in global ocean health watch 45 Intro to OHI+: Transforming marine science for management watch 45 Best practices: Assessing ocean health using tailorable frameworks read 60 Plan Tailoring the OHI+ to the U.S. Northeast read 45 Gathering and organizing data read 60 Better science in less time read 60 Conduct Overview of the OHI+ workflow read 10 What is the Toolbox? read 30 Intro to open data science watch 270 Calculations: basic workflow watch 120 Calculations: advanced workflow read 60 Uncertainty &amp; gapfilling read 20 Inform OHI+ websites read 60 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
